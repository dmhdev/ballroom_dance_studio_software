/*
 * This class displays all Students in database and handles any actions for that student.
 */
package views.student;

import commons.entities.Student;
import views.program_enrollment.StudentProgramEnrollment;
import views.lesson.StudentScheduleLesson;
import commons.helpers.GenericHelper;
import static commons.helpers.NavHelper.addToNavHistory;
import commons.helpers.TableHelper;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import static commons.helpers.NavHelper.setStudentID;
import static commons.helpers.NavHelper.openPreviousView;
import static commons.helpers.NavHelper.studentType;
import static commons.helpers.NavHelper.studentID;
import static commons.helpers.NavHelper.printNavHistory;

/**
 *
 * @author Akureyri
 */
public class StudentManager extends javax.swing.JFrame {

    private GenericHelper genericHelper = new GenericHelper();
    private TableHelper tableHelper = new TableHelper();
    StudentAttendLesson attendPurchaseLesson = null;
    StudentProgramEnrollment studentProgramEnrollment = null;
    StudentDetails studentDetails = null;
    private DefaultTableModel studentTableModel, enrollmentTableModel;
    private TableRowSorter studentSorter, enrollmentSorter;

    /**
     * Creates new form StudentsManager
     */
    public StudentManager() {

        initComponents();
        // Set Window Icon
        try {
            BufferedImage favicon = ImageIO.read(getClass().getResource("/resources/icon16.png"));
            setIconImage(favicon);
        } catch (IOException e) {
            e.printStackTrace();
        }

        setTitle("Students Manager - Dance Studios");

        setLocationRelativeTo(null);
        setResizable(true);

        // Set initial fields
        try {
            setFields();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        activeInactiveBtnGroup = new javax.swing.ButtonGroup();
        mainLogo = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        studentNameLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        enrollmentTable = new javax.swing.JTable();
        mainTitleLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        activeInactiveLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addStudentBtn = new javax.swing.JButton();
        scheduleLessonsBtn = new javax.swing.JButton();
        attendPurchaseLessonBtn = new javax.swing.JButton();
        enrollProgramBtn = new javax.swing.JButton();
        studentDetailBtn = new javax.swing.JButton();
        deleteStudentBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        lastModifiedLabel = new javax.swing.JLabel();
        searchInput = new javax.swing.JTextField();
        allFilter = new javax.swing.JRadioButton();
        activeFilter = new javax.swing.JRadioButton();
        inactiveFilter = new javax.swing.JRadioButton();
        titleLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 967, 642));
        setMinimumSize(new java.awt.Dimension(994, 825));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/banner-slim.png"))); // NOI18N
        getContentPane().add(mainLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 0, 360, 90));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentNameLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        studentNameLabel.setForeground(java.awt.Color.blue);
        studentNameLabel.setText("Example, Name");
        jPanel1.add(studentNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 3, 530, -1));

        enrollmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Program", "Total Lessons", "Used Lessons", "Paid", "Contract"
            }
        ));
        jScrollPane2.setViewportView(enrollmentTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 690, 150));

        mainTitleLabel.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        mainTitleLabel.setText("Program Enrollment:");
        jPanel1.add(mainTitleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 190, -1));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        jLabel4.setText("Status:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, -1, -1));

        activeInactiveLabel.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        activeInactiveLabel.setForeground(new java.awt.Color(255, 0, 0));
        activeInactiveLabel.setText("Active");
        jPanel1.add(activeInactiveLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 60, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 710, 230));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addStudentBtn.setText("Add Student");
        addStudentBtn.setMaximumSize(new java.awt.Dimension(167, 29));
        addStudentBtn.setMinimumSize(new java.awt.Dimension(167, 29));
        addStudentBtn.setPreferredSize(new java.awt.Dimension(167, 29));
        addStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentBtnActionPerformed(evt);
            }
        });
        jPanel2.add(addStudentBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 190, 30));

        scheduleLessonsBtn.setText("Schedule Lessons");
        scheduleLessonsBtn.setMaximumSize(new java.awt.Dimension(167, 29));
        scheduleLessonsBtn.setMinimumSize(new java.awt.Dimension(167, 29));
        scheduleLessonsBtn.setPreferredSize(new java.awt.Dimension(167, 29));
        scheduleLessonsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleLessonsBtnActionPerformed(evt);
            }
        });
        jPanel2.add(scheduleLessonsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 190, 30));

        attendPurchaseLessonBtn.setText("Attend Lessons");
        attendPurchaseLessonBtn.setMaximumSize(new java.awt.Dimension(167, 29));
        attendPurchaseLessonBtn.setMinimumSize(new java.awt.Dimension(167, 29));
        attendPurchaseLessonBtn.setPreferredSize(new java.awt.Dimension(167, 29));
        attendPurchaseLessonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attendPurchaseLessonBtnActionPerformed(evt);
            }
        });
        jPanel2.add(attendPurchaseLessonBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 190, 30));

        enrollProgramBtn.setText("Enroll Program");
        enrollProgramBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollProgramBtnActionPerformed(evt);
            }
        });
        jPanel2.add(enrollProgramBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 190, 30));

        studentDetailBtn.setText("Student Details");
        studentDetailBtn.setMaximumSize(new java.awt.Dimension(167, 29));
        studentDetailBtn.setMinimumSize(new java.awt.Dimension(167, 29));
        studentDetailBtn.setPreferredSize(new java.awt.Dimension(167, 29));
        studentDetailBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDetailBtnActionPerformed(evt);
            }
        });
        jPanel2.add(studentDetailBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 190, -1));

        deleteStudentBtn.setText("Delete Student");
        deleteStudentBtn.setMaximumSize(new java.awt.Dimension(167, 29));
        deleteStudentBtn.setMinimumSize(new java.awt.Dimension(167, 29));
        deleteStudentBtn.setPreferredSize(new java.awt.Dimension(167, 29));
        deleteStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteStudentBtnActionPerformed(evt);
            }
        });
        jPanel2.add(deleteStudentBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 190, 30));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 170, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 110, 210, 260));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setText("Filter:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 40, 30));

        lastModifiedLabel.setText("Last Modified: 01/21/2014");
        getContentPane().add(lastModifiedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 10, -1, -1));

        searchInput.setToolTipText("Filter Students");
        getContentPane().add(searchInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 160, 30));

        activeInactiveBtnGroup.add(allFilter);
        allFilter.setText("All");
        getContentPane().add(allFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 380, -1, 30));

        activeInactiveBtnGroup.add(activeFilter);
        activeFilter.setSelected(true);
        activeFilter.setText("Active");
        getContentPane().add(activeFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 380, -1, 30));

        activeInactiveBtnGroup.add(inactiveFilter);
        inactiveFilter.setText("Inactive");
        getContentPane().add(inactiveFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 380, -1, 30));

        titleLabel.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Student Manager");
        getContentPane().add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 83, 350, 30));

        jPanel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        studentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Last Name", "First Name", "StudentID", "Status", "Address", "City", "State", "Zip", "Email", "HomePhone", "WorkPhone", "Instructor", "Mailing List", "Notes", "BonusPrivate", "BonusGroup"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        studentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                studentTableMouseReleased(evt);
            }
        });
        studentTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                studentTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(studentTable);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel3, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 1000, 390));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Sets initial fields
    private void setFields() throws InterruptedException {
        printNavHistory();
        //System.out.println("Student id: " + studentID);
        //System.out.println("Student type: " + studentType);
        //System.out.println("Last view: " + navHistory.get(navHistory.size() - 1) + navHistory.size());
        try {
            tableHelper.populateStudentsTable(studentType, studentTable, studentSorter, studentTableModel, activeFilter, inactiveFilter, allFilter, searchInput);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Update UI from selected row
        try {
            if (studentTable.getRowCount() > 0) {

                updateUIFromTable(studentTable, true);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Scroll selected row into view
        //genericHelper.scrollTableToVisible(studentTable, CommonMethods.studentRow+7, 0);
        // Set double-click listener on student table
        studentTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent me) {

                JTable table = (JTable) me.getSource();
                Point p = me.getPoint();
                int row = table.rowAtPoint(p);
                if (me.getClickCount() == 2) {

                    // Add to Nav History
                    if (studentType.equals("Student")) {
                        addToNavHistory("StudentManager");
                    } else if (studentType.equals("New Student")) {
                        addToNavHistory("NewStudentManager");
                    } else if (studentType.equals("Unenrolled Student")) {
                        addToNavHistory("UnenrolledStudentManager");
                    }

                    // Clear text in search input
                    searchInput.setText("");

                    // Set Student Row selection
                    GenericHelper.studentRow = studentTable.getSelectedRow();

                    // Set Filter selection
                    if (activeFilter.isSelected()) {
                        GenericHelper.studentFilter = 0;
                    } else if (inactiveFilter.isSelected()) {
                        GenericHelper.studentFilter = 1;
                    } else if (allFilter.isSelected()) {
                        GenericHelper.studentFilter = 2;
                    }

                    // Disable all Buttons
                    genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

                    // Disable table actions
                    studentTable.setRowSelectionAllowed(false);
                    studentTable.setColumnSelectionAllowed(false);

                    // Open Student Details View
                    studentDetails = new StudentDetails();
                    studentDetails.setVisible(true);
                    StudentManager.this.dispose();

                }
            }
        });

        // Set initial enrollment table values
        try {
            tableHelper.populateEnrollmentTable(enrollmentTable, enrollmentSorter, enrollmentTableModel, studentID);
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Change fields for New Student
        if (studentType.equals("New Student")) {

            // Change Title Label
            titleLabel.setText("New Student Manager");
        } else if (studentType.equals("Unenrolled Student")) {

            // Change Title Label
            titleLabel.setText("Unenrolled Student Manager");
        }

    }

    // Update data for selected item in table
    private void updateUIFromTable(JTable target, boolean initializeUI) {

        // Get selected row
        GenericHelper.studentRow = target.convertRowIndexToModel(target.getSelectedRow());

        // Get student values
        String lastName = (String) target.getModel().getValueAt(GenericHelper.studentRow, 0);
        String firstName = (String) target.getModel().getValueAt(GenericHelper.studentRow, 1);
        String currentStudentID = (String) target.getModel().getValueAt(GenericHelper.studentRow, 5);
        String status = (String) target.getModel().getValueAt(GenericHelper.studentRow, 6);
        String lastModified = (String) target.getModel().getValueAt(GenericHelper.studentRow, 7);

        // Update current student
        setStudentID(currentStudentID);

        // Set student values in UI
        studentNameLabel.setText(lastName + ", " + firstName);
        lastModifiedLabel.setText("Last Modified: " + lastModified);

        // Set status label in UI
        if (status == "Active") {
            activeInactiveLabel.setText(status);
            activeInactiveLabel.setForeground(Color.RED);
        } else {
            activeInactiveLabel.setText(status);
            activeInactiveLabel.setForeground(Color.BLUE);
        }
    }


    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed


        // Disable all Buttons
        genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

        // Disable table actions
        studentTable.setRowSelectionAllowed(false);
        studentTable.setColumnSelectionAllowed(false);

        // Open Main Menu
        Thread thr = new Thread() {
            public void run() {

                openPreviousView();
                StudentManager.this.dispose();
            }
        };
        thr.start();

    }//GEN-LAST:event_backBtnActionPerformed

    private void studentTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_studentTableKeyReleased

        // Update UI
        JTable target = (JTable) evt.getSource();
        updateUIFromTable(target, false);

        // Repopulate Enrollment
        try {
            tableHelper.populateEnrollmentTable(enrollmentTable, enrollmentSorter, enrollmentTableModel, studentID);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_studentTableKeyReleased

    private void studentTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentTableMouseReleased

        // Update UI
        JTable target = (JTable) evt.getSource();
        updateUIFromTable(target, false);

        // Repopulate Enrollment
        try {
            tableHelper.populateEnrollmentTable(enrollmentTable, enrollmentSorter, enrollmentTableModel, studentID);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_studentTableMouseReleased

    private void addStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentBtnActionPerformed

        // Clear text in search input
        searchInput.setText("");

        // Set selected row
        GenericHelper.studentRow = studentTable.getSelectedRow();

        // Set Filter selection
        if (activeFilter.isSelected()) {
            GenericHelper.studentFilter = 0;
        } else if (inactiveFilter.isSelected()) {
            GenericHelper.studentFilter = 1;
        } else if (allFilter.isSelected()) {
            GenericHelper.studentFilter = 2;
        }

        // Open Add Student Dialog
        Thread thr = new Thread() {
            public void run() {
                AddStudent add_student = new AddStudent(StudentManager.this);
                add_student.setLocationRelativeTo(null);
                add_student.setVisible(true);
            }
        };
        thr.start();

    }//GEN-LAST:event_addStudentBtnActionPerformed

    private void scheduleLessonsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleLessonsBtnActionPerformed

        // Clear text in search input
        searchInput.setText("");

        // Set selected row
        GenericHelper.studentRow = studentTable.getSelectedRow();

        // Set Filter selection
        if (activeFilter.isSelected()) {
            GenericHelper.studentFilter = 0;
        } else if (inactiveFilter.isSelected()) {
            GenericHelper.studentFilter = 1;
        } else if (allFilter.isSelected()) {
            GenericHelper.studentFilter = 2;
        }

        // Disable all Buttons
        genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

        // Disable table actions
        studentTable.setRowSelectionAllowed(false);
        studentTable.setColumnSelectionAllowed(false);

        // Add to Nav History
        if (studentType.equals("Student")) {
            addToNavHistory("StudentManager");
        } else if (studentType.equals("New Student")) {
            addToNavHistory("NewStudentManager");
        } else if (studentType.equals("Unenrolled Student")) {
            addToNavHistory("UnenrolledStudentManager");
        }

        // Open Schedule Lesson Dialog
        Thread thr = new Thread() {
            public void run() {

                StudentScheduleLesson studentAddLesson = new StudentScheduleLesson();
                studentAddLesson.setVisible(true);
                StudentManager.this.dispose();
            }
        };
        thr.start();

    }//GEN-LAST:event_scheduleLessonsBtnActionPerformed

    private void attendPurchaseLessonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attendPurchaseLessonBtnActionPerformed

        // Add to Nav History
        if (studentType.equals("Student")) {
            addToNavHistory("StudentManager");
        } else if (studentType.equals("New Student")) {
            addToNavHistory("NewStudentManager");
        } else if (studentType.equals("Unenrolled Student")) {
            addToNavHistory("UnenrolledStudentManager");
        }

        // Clear text in search input
        searchInput.setText("");

        // Set selected row
        GenericHelper.studentRow = studentTable.getSelectedRow();

        // Set Filter selection
        if (activeFilter.isSelected()) {
            GenericHelper.studentFilter = 0;
        } else if (inactiveFilter.isSelected()) {
            GenericHelper.studentFilter = 1;
        } else if (allFilter.isSelected()) {
            GenericHelper.studentFilter = 2;
        }

        // Disable all Buttons
        genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

        // Disable table actions
        studentTable.setRowSelectionAllowed(false);
        studentTable.setColumnSelectionAllowed(false);

        // Open Attend Lesson Dialog
        Thread thr = new Thread() {
            public void run() {

                attendPurchaseLesson = new StudentAttendLesson();
                attendPurchaseLesson.setVisible(true);
                StudentManager.this.dispose();
            }
        };
        thr.start();


    }//GEN-LAST:event_attendPurchaseLessonBtnActionPerformed

    private void enrollProgramBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollProgramBtnActionPerformed

        // Add to Nav History
        if (studentType.equals("Student")) {
            addToNavHistory("StudentManager");
        } else if (studentType.equals("New Student")) {
            addToNavHistory("NewStudentManager");
        } else if (studentType.equals("Unenrolled Student")) {
            addToNavHistory("UnenrolledStudentManager");
        }

        // Clear text in search input
        searchInput.setText("");

        // Set selected row
        GenericHelper.studentRow = studentTable.getSelectedRow();

        // Set Filter selection
        if (activeFilter.isSelected()) {
            GenericHelper.studentFilter = 0;
        } else if (inactiveFilter.isSelected()) {
            GenericHelper.studentFilter = 1;
        } else if (allFilter.isSelected()) {
            GenericHelper.studentFilter = 2;
        }

        // Disable all Buttons
        genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

        // Disable table actions
        studentTable.setRowSelectionAllowed(false);
        studentTable.setColumnSelectionAllowed(false);

        // Open Program Enrollment
        Thread thr = new Thread() {
            public void run() {

                studentProgramEnrollment = new StudentProgramEnrollment();
                studentProgramEnrollment.setVisible(true);
                StudentManager.this.dispose();
            }
        };
        thr.start();
    }//GEN-LAST:event_enrollProgramBtnActionPerformed

    private void studentDetailBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDetailBtnActionPerformed

        // Add to Nav History
        if (studentType.equals("Student")) {
            addToNavHistory("StudentManager");
        } else if (studentType.equals("New Student")) {
            addToNavHistory("NewStudentManager");
        } else if (studentType.equals("Unenrolled Student")) {
            addToNavHistory("UnenrolledStudentManager");
        }

        // Clear text in search input
        searchInput.setText("");

        // Set selected row
        GenericHelper.studentRow = studentTable.getSelectedRow();

        // Set Filter selection
        if (activeFilter.isSelected()) {
            GenericHelper.studentFilter = 0;
        } else if (inactiveFilter.isSelected()) {
            GenericHelper.studentFilter = 1;
        } else if (allFilter.isSelected()) {
            GenericHelper.studentFilter = 2;
        }

        // Disable all Buttons
        genericHelper.toggleAllButtonsEnabled(StudentManager.this, false);

        // Disable table actions
        studentTable.setRowSelectionAllowed(false);
        studentTable.setColumnSelectionAllowed(false);

        // Open Student Details
        Thread thr = new Thread() {
            public void run() {

                studentDetails = new StudentDetails();
                studentDetails.setVisible(true);
                StudentManager.this.dispose();
            }
        };
        thr.start();
    }//GEN-LAST:event_studentDetailBtnActionPerformed

    private void deleteStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteStudentBtnActionPerformed

        // Get selected student
        int row = studentTable.convertRowIndexToModel(studentTable.getSelectedRow());
        String currentStudentID = (String) studentTable.getModel().getValueAt(row, 5);
        String studentLastName = (String) studentTable.getModel().getValueAt(row, 0);
        String studentFirstName = (String) studentTable.getModel().getValueAt(row, 1);
        String dialogText = String.format("Really delete student %s %s?\nThis will delete all associated Enrollments, Lessons, Payments, and Bonus Transactions.",
                studentFirstName, studentLastName);

        // Confirmation dialog to see if really wants to save
        int confirmUpdate = JOptionPane.showConfirmDialog(null, dialogText, "Confirm Deletion", JOptionPane.YES_NO_OPTION);
        if (confirmUpdate == JOptionPane.YES_OPTION) {

            // Delete student
            Student student = new Student(currentStudentID);
            try {
                student.deleteStudent();

                setFields();

            } catch (Exception e) {
                e.printStackTrace();
            }

        }


    }//GEN-LAST:event_deleteStudentBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new StudentManager().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton activeFilter;
    private javax.swing.ButtonGroup activeInactiveBtnGroup;
    private javax.swing.JLabel activeInactiveLabel;
    private javax.swing.JButton addStudentBtn;
    private javax.swing.JRadioButton allFilter;
    private javax.swing.JButton attendPurchaseLessonBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton deleteStudentBtn;
    private javax.swing.JButton enrollProgramBtn;
    private javax.swing.JTable enrollmentTable;
    private javax.swing.JRadioButton inactiveFilter;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lastModifiedLabel;
    private javax.swing.JLabel mainLogo;
    private javax.swing.JLabel mainTitleLabel;
    private javax.swing.JButton scheduleLessonsBtn;
    private javax.swing.JTextField searchInput;
    private javax.swing.JButton studentDetailBtn;
    private javax.swing.JLabel studentNameLabel;
    private javax.swing.JTable studentTable;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
